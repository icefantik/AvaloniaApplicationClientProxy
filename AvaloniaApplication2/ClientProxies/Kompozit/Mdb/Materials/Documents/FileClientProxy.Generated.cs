// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using Kompozit.Mdb.Materials.Documents;
using Kompozit.Mdb.Shared;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace Kompozit.Mdb.Materials.Documents;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IFileAppService), typeof(FileClientProxy))]
public partial class FileClientProxy : ClientProxyBase<IFileAppService>, IFileAppService
{
    public virtual async Task<GetСontentFileDto> GetFileAsync(Guid id)
    {
        return await RequestAsync<GetСontentFileDto>(nameof(GetFileAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<IEnumerable<GetListFilesDto>> GetListUnrecognizedFilesAsync()
    {
        return await RequestAsync<IEnumerable<GetListFilesDto>>(nameof(GetListUnrecognizedFilesAsync));
    }

    public virtual async Task<FileDto> GetAsync(Guid id)
    {
        return await RequestAsync<FileDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<FileDto>> GetListAsync(PagedAndSortedAndFilteredResultRequestDto input)
    {
        return await RequestAsync<PagedResultDto<FileDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PagedAndSortedAndFilteredResultRequestDto), input }
        });
    }
}
