// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using Acme.BookStore.Authors;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace Acme.BookStore.Authors;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IAuthorAppService), typeof(AuthorClientProxy))]
public partial class AuthorClientProxy : ClientProxyBase<IAuthorAppService>, IAuthorAppService
{
    public virtual async Task<AuthorDto> GetAsync(Guid id)
    {
        return await RequestAsync<AuthorDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<AuthorDto>> GetListAsync(GetAuthorListDto input)
    {
        return await RequestAsync<PagedResultDto<AuthorDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetAuthorListDto), input }
        });
    }

    public virtual async Task<AuthorDto> CreateAsync(CreateAuthorDto input)
    {
        return await RequestAsync<AuthorDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateAuthorDto), input }
        });
    }

    public virtual async Task UpdateAsync(Guid id, UpdateAuthorDto input)
    {
        await RequestAsync(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateAuthorDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
