// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using Acme.BookStore.Books;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace Acme.BookStore.Books;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IBookAppService), typeof(BookClientProxy))]
public partial class BookClientProxy : ClientProxyBase<IBookAppService>, IBookAppService
{
    public virtual async Task<BookDto> GetAsync(Guid id)
    {
        return await RequestAsync<BookDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<BookDto>> GetListAsync(PagedAndSortedResultRequestDto input)
    {
        return await RequestAsync<PagedResultDto<BookDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PagedAndSortedResultRequestDto), input }
        });
    }

    public virtual async Task<ListResultDto<AuthorLookupDto>> GetAuthorLookupAsync()
    {
        return await RequestAsync<ListResultDto<AuthorLookupDto>>(nameof(GetAuthorLookupAsync));
    }

    public virtual async Task<BookDto> CreateAsync(CreateUpdateBookDto input)
    {
        return await RequestAsync<BookDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateUpdateBookDto), input }
        });
    }

    public virtual async Task<BookDto> UpdateAsync(Guid id, CreateUpdateBookDto input)
    {
        return await RequestAsync<BookDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(CreateUpdateBookDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
